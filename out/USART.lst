C51 COMPILER V9.55   USART                                                                 05/14/2020 20:00:14 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN c:\Users\Administrator\Documents\Source\MCU\bujin\.\out\USART.obj
COMPILER INVOKED BY: c:\Keil_v5\C51\BIN\C51.exe c:\Users\Administrator\Documents\Source\MCU\bujin\.\dependence\build-in\
                    -STD\USART.C COMPACT OMF2 ROM(LARGE) OPTIMIZE(8,SPEED) REGFILE(c:\Users\Administrator\Documents\Source\MCU\bujin\.\out\ma
                    -in.ORC) INCDIR(c:\Users\Administrator\Documents\Source\MCU\bujin\.\dependence;c:\Users\Administrator\Documents\Source\MC
                    -U\bujin\.\dependence\build-in;c:\Users\Administrator\Documents\Source\MCU\bujin\.\dependence\build-in\STD;c:\Keil_v5\C51
                    -\INC) PRINT(c:\Users\Administrator\Documents\Source\MCU\bujin\.\out\USART.lst) TABS(2) OBJECT(c:\Users\Administrator\Doc
                    -uments\Source\MCU\bujin\.\out\USART.obj)

line level    source

   1          
   2          #include "C:\Users\Administrator\Documents\Source\MCU\bujin\dependence\build-in\STD\USART.h"
*** WARNING C318 IN LINE 18 OF C:\Users\Administrator\Documents\Source\MCU\bujin\dependence\build-in\STD\config.h: can't
             - open file 'stc8.h'
*** ERROR C141 IN LINE 35 OF C:\Users\Administrator\Documents\Source\MCU\bujin\dependence\build-in\STD\USART.h: syntax e
             -rror near 'u8'
*** ERROR C129 IN LINE 35 OF C:\Users\Administrator\Documents\Source\MCU\bujin\dependence\build-in\STD\USART.h: missing 
             -';' before 'id'
   3          
   4          
   5          COMx_Define COM1,COM2;
   6          u8  xdata TX1_Buffer[COM_TX1_Lenth];  //���ͻ���
   7          u8  xdata RX1_Buffer[COM_RX1_Lenth];  //���ջ���
   8          u8  xdata TX2_Buffer[COM_TX2_Lenth];  //���ͻ���
   9          u8  xdata RX2_Buffer[COM_RX2_Lenth];  //���ջ���
  10          
  11          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  12          {
  13            u8  i;
  14            u32 j;
  15            
  16            if(UARTx == USART1)
  17            {
  18              COM1.id = 1;
  19              COM1.TX_read    = 0;
  20              COM1.TX_write   = 0;
  21              COM1.B_TX_busy  = 0;
  22              COM1.RX_Cnt     = 0;
  23              COM1.RX_TimeOut = 0;
  24              COM1.B_RX_OK    = 0;
  25              for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  26              for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  27          
  28              if(COMx->UART_Mode > UART_9bit_BRTx)  return 2; //ģʽ����
  29              if(COMx->UART_Polity == PolityHigh)   PS = 1; //�����ȼ��ж�
  30              else                  PS = 0; //�����ȼ��ж�
  31              SCON = (SCON & 0x3f) | COMx->UART_Mode;
  32              if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //�ɱ䲨����
  33              {
  34                j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //��1T����
  35                if(j >= 65536UL)  return 2; //����
  36                j = 65536UL - j;
  37                if(COMx->UART_BRT_Use == BRT_Timer1)
  38                {
  39                  TR1 = 0;
  40                  AUXR &= ~0x01;    //S1 BRT Use Timer1;
  41                  TMOD &= ~(1<<6);  //Timer1 set As Timer
  42                  TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  43                  AUXR |=  (1<<6);  //Timer1 set as 1T mode
  44                  TH1 = (u8)(j>>8);
C51 COMPILER V9.55   USART                                                                 05/14/2020 20:00:14 PAGE 2   

  45                  TL1 = (u8)j;
  46                  ET1 = 0;  //��ֹ�ж�
  47                  TMOD &= ~0x40;  //��ʱ
  48                  INTCLKO &= ~0x02; //�����ʱ��?
  49                  TR1  = 1;
  50                }
  51                else if(COMx->UART_BRT_Use == BRT_Timer2)
  52                {
  53                  AUXR &= ~(1<<4);  //Timer stop
  54                  AUXR |= 0x01;   //S1 BRT Use Timer2;
  55                  AUXR &= ~(1<<3);  //Timer2 set As Timer
  56                  AUXR |=  (1<<2);  //Timer2 set as 1T mode
  57                  TH2 = (u8)(j>>8);
  58                  TL2 = (u8)j;
  59                  IE2  &= ~(1<<2);  //��ֹ�ж�
  60                  AUXR &= ~(1<<3);  //��ʱ
  61                  AUXR |=  (1<<4);  //Timer run enable
  62                }
  63                else return 2;  //����
  64              }
  65              else if(COMx->UART_Mode == UART_ShiftRight)
  66              {
  67                if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //�̶�������SysClk/2
  68                else                AUXR &= ~(1<<5);  //�̶�������SysClk/12
  69              }
  70              else if(COMx->UART_Mode == UART_9bit) //�̶�������SysClk*2^SMOD/64
  71              {
  72                if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //�̶�������SysClk/32
  73                else                PCON &= ~(1<<7);  //�̶�������SysClk/64
  74              }
  75              if(COMx->UART_Interrupt == ENABLE)  ES = 1; //�����ж�
  76              else                ES = 0; //��ֹ�ж�
  77              if(COMx->UART_RxEnable == ENABLE) REN = 1;  //��������
  78              else                REN = 0;  //��ֹ����
  79              P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //�л�IO
  80              if(COMx->UART_RXD_TXD_Short == ENABLE)  CLKDIV |=  (1<<4);  //�ڲ���·RXD��TXD, ���м�
             -, ENABLE,DISABLE
  81              else                  CLKDIV &= ~(1<<4);
  82              return  0;
  83            }
  84          
  85            if(UARTx == USART2)
  86            {
  87              COM2.id = 2;
  88              COM2.TX_read    = 0;
  89              COM2.TX_write   = 0;
  90              COM2.B_TX_busy  = 0;
  91              COM2.RX_Cnt     = 0;
  92              COM2.RX_TimeOut = 0;
  93              COM2.B_RX_OK    = 0;
  94              for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
  95              for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
  96          
  97              if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //�ɱ䲨����
  98              {
  99                if(COMx->UART_Polity == PolityHigh)   IP2 |=  1;  //�����ȼ��ж�
 100                else                  IP2 &= ~1;  //�����ȼ��ж�
 101                if(COMx->UART_Mode == UART_9bit_BRTx) S2CON |=  (1<<7); //9bit
 102                else                  S2CON &= ~(1<<7); //8bit
 103                j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //��1T����
 104                if(j >= 65536UL)  return 2; //����
 105                j = 65536UL - j;
C51 COMPILER V9.55   USART                                                                 05/14/2020 20:00:14 PAGE 3   

 106                AUXR &= ~(1<<4);  //Timer stop
 107                AUXR &= ~(1<<3);  //Timer2 set As Timer
 108                AUXR |=  (1<<2);  //Timer2 set as 1T mode
 109                TH2 = (u8)(j>>8);
 110                TL2 = (u8)j;
 111                IE2  &= ~(1<<2);  //��ֹ�ж�
 112                AUXR |=  (1<<4);  //Timer run enable
 113              }
 114              else  return 2; //ģʽ����
 115              if(COMx->UART_Interrupt == ENABLE)  IE2   |=  1;    //�����ж�
 116              else                IE2   &= ~1;    //��ֹ�ж�
 117              if(COMx->UART_RxEnable == ENABLE) S2CON |=  (1<<4); //��������
 118              else                S2CON &= ~(1<<4); //��ֹ����
 119              P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);  //�л�IO
 120            }
 121          }
 122          
 123          
 124          /*************** װ�ش��ڷ��ͻ��� *******************************/
 125          
 126          void TX1_write2buff(u8 dat) //д�뷢�ͻ��壬ָ��+1
 127          {
 128            TX1_Buffer[COM1.TX_write] = dat;  //װ���ͻ���
 129            if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
 130          
 131            if(COM1.B_TX_busy == 0)   //����
 132            {  
 133              COM1.B_TX_busy = 1;   //��־æ
 134              TI = 1;         //���������ж�
 135            }
 136          }
 137          
 138          void TX2_write2buff(u8 dat) //д�뷢�ͻ��壬ָ��+1
 139          {
 140            TX2_Buffer[COM2.TX_write] = dat;  //װ���ͻ���
 141            if(++COM2.TX_write >= COM_TX2_Lenth)  COM2.TX_write = 0;
 142          
 143            if(COM2.B_TX_busy == 0)   //����
 144            {  
 145              COM2.B_TX_busy = 1;   //��־æ
 146              S2CON |=  2;        //���������ж�
 147            }
 148          }
 149          
 150          void PrintString1(u8 *puts)
 151          {
 152              for (; *puts != 0;  puts++)  TX1_write2buff(*puts);   //����ֹͣ��0����
 153          }
 154          
 155          void PrintString2(u8 *puts)
 156          {
 157              for (; *puts != 0;  puts++)  TX2_write2buff(*puts);   //����ֹͣ��0����
 158          }
 159          
 160          /*
 161          void COMx_write2buff(COMx_Define *COMx, u8 dat) //д�뷢�ͻ��壬ָ��+1
 162          {
 163            if(COMx->id == 1) TX1_write2buff(dat);
 164            if(COMx->id == 2) TX2_write2buff(dat);
 165          }
 166          
 167          void PrintString(COMx_Define *COMx, u8 *puts)
C51 COMPILER V9.55   USART                                                                 05/14/2020 20:00:14 PAGE 4   

 168          {
 169              for (; *puts != 0;  puts++)  COMx_write2buff(COMx,*puts);   //����ֹͣ��0����
 170          }
 171          */
 172          
 173          
 174          /********************* UART1�жϺ���************************/
 175          void UART1_int (void) interrupt UART1_VECTOR
 176          {
 177            if(RI)
 178            {
 179              RI = 0;
 180              if(COM1.B_RX_OK == 0)
 181              {
 182                if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
 183                RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 184                COM1.RX_TimeOut = TimeOutSet1;
 185              }
 186            }
 187          
 188            if(TI)
 189            {
 190              TI = 0;
 191              if(COM1.TX_read != COM1.TX_write)
 192              {
 193                SBUF = TX1_Buffer[COM1.TX_read];
 194                if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
 195              }
 196              else  COM1.B_TX_busy = 0;
 197            }
 198          }
 199          
 200          /********************* UART2�жϺ���************************/
 201          void UART2_int (void) interrupt UART2_VECTOR
 202          {
 203            if((S2CON & 1) != 0)
 204            {
 205              S2CON &= ~1;
 206              if(COM2.B_RX_OK == 0)
 207              {
 208                if(COM2.RX_Cnt >= COM_RX2_Lenth)  COM2.RX_Cnt = 0;
 209                RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 210                COM2.RX_TimeOut = TimeOutSet2;
 211              }
 212            }
 213          
 214            if((S2CON & 2) != 0)
 215            {
 216              S2CON &= ~2;
 217              if(COM2.TX_read != COM2.TX_write)
 218              {
 219                S2BUF = TX2_Buffer[COM2.TX_read];
 220                if(++COM2.TX_read >= COM_TX2_Lenth)   COM2.TX_read = 0;
 221              }
 222              else  COM2.B_TX_busy = 0;
 223            }
 224          
 225          }
 226          
 227          
 228          

C51 COMPILATION COMPLETE.  1 WARNING(S),  2 ERROR(S)
