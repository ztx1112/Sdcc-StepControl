C51 COMPILER V9.55   TIMER                                                                 04/12/2020 16:17:52 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN c:\Users\Administrator\Documents\Source\MCU\bujin\.\out\timer.obj
COMPILER INVOKED BY: c:\Keil_v5\C51\BIN\C51.exe c:\Users\Administrator\Documents\Source\MCU\bujin\.\dependence\build-in\
                    -STD\timer.c LARGE OMF2 ROM(LARGE) OPTIMIZE(8,SPEED) REGFILE(c:\Users\Administrator\Documents\Source\MCU\bujin\.\out\main
                    -.ORC) INCDIR(c:\Users\Administrator\Documents\Source\MCU\bujin\.\dependence;c:\Users\Administrator\Documents\Source\MCU\
                    -bujin\.\dependence\build-in;c:\Users\Administrator\Documents\Source\MCU\bujin\.\dependence\build-in\STD;c:\Keil_v5\C51\I
                    -NC) PRINT(c:\Users\Administrator\Documents\Source\MCU\bujin\.\out\timer.lst) TABS(2) OBJECT(c:\Users\Administrator\Docum
                    -ents\Source\MCU\bujin\.\out\timer.obj)

line level    source

   1          
   2          /*************  ÂäüËÉΩËØ¥Êòé  **************
   3          
   4          Êú¨Êñá‰ª∂‰∏∫STC15xxxÁ≥ªÂàóÁöÑÂÆöÊó∂Âô®ÂàùÂßãÂåñÂíå‰∏≠Êñ≠Á®ãÂ∫è,Áî®Êà∑ÂèØ‰ª•Âú®Ëøô‰∏™Êñá‰ª∂‰∏≠‰øÆÊîπËá™Â∑±È
             -úÄË¶ÅÁöÑ‰∏≠Êñ≠Á®ãÂ∫è.
   5          
   6          
   7          ******************************************/
   8          
   9          
  10          
  11          #include  "timer.h"
  12          
  13          /********************* Timer0‰∏≠Êñ≠ÂáΩÊï∞************************/
  14          void timer0_int (void) interrupt TIMER0_VECTOR
  15          {
  16   1      
  17   1      }
  18          
  19          /********************* Timer1‰∏≠Êñ≠ÂáΩÊï∞************************/
  20          void timer1_int (void) interrupt TIMER1_VECTOR
  21          {
  22   1      
  23   1      }
  24          
  25          /********************* Timer2‰∏≠Êñ≠ÂáΩÊï∞************************/
  26          void timer2_int (void) interrupt TIMER2_VECTOR
  27          {
  28   1        P10 = ~P10;
  29   1      }
  30          
  31          
  32          //========================================================================
  33          // ÂáΩÊï∞: u8 Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  34          // ÊèèËø∞: ÂÆöÊó∂Âô®ÂàùÂßãÂåñÁ®ãÂ∫è.
  35          // ÂèÇÊï∞: TIMx: ÁªìÊûÑÂèÇÊï∞,ËØ∑ÂèÇËÄÉtimer.hÈáåÁöÑÂÆö‰πâ.
  36          // ËøîÂõû: ÊàêÂäüËøîÂõû0, Á©∫Êìç‰ΩúËøîÂõû1,ÈîôËØØËøîÂõû2.
  37          // ÁâàÊú¨: V1.0, 2012-10-22
  38          //========================================================================
  39          u8  Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  40          {
  41   1        if(TIM > Timer2)  return 1; //Á©∫Êìç‰Ωú
  42   1      
  43   1        if(TIM == Timer0)
  44   1        {
  45   2          TR0 = 0;    //ÂÅúÊ≠¢ËÆ°Êï∞
  46   2          if(TIMx->TIM_Interrupt == ENABLE)   ET0 = 1;  //ÂÖÅËÆ∏‰∏≠Êñ≠
  47   2          else                  ET0 = 0;  //Á¶ÅÊ≠¢‰∏≠Êñ≠
  48   2          if(TIMx->TIM_Polity == PolityHigh)    PT0 = 1;  //È´ò‰ºòÂÖàÁ∫ß‰∏≠Êñ≠
  49   2          else                  PT0 = 0;  //‰Ωé‰ºòÂÖàÁ∫ß‰∏≠Êñ≠
C51 COMPILER V9.55   TIMER                                                                 04/12/2020 16:17:52 PAGE 2   

  50   2          if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2; //ÈîôËØØ
  51   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //Â∑•‰ΩúÊ®°Âºè,0: 16‰ΩçËá™Âä®ÈáçË£Ö, 1: 16‰ΩçÂÆöÊó∂/ËÆ°Êï∞, 2: 8
             -‰ΩçËá™Âä®ÈáçË£Ö, 3: 16‰ΩçËá™Âä®ÈáçË£Ö, ‰∏çÂèØÂ±èËîΩ‰∏≠Êñ≠
  52   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x80;  //12T
  53   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x80;  //1T
  54   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x04;  //ÂØπÂ§ñËÆ°Êï∞ÊàñÂàÜÈ¢ë
  55   2          else                    TMOD &= ~0x04;  //ÂÆöÊó∂
  56   2          if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x01; //ËæìÂá∫Êó∂Èíü
  57   2          else              INTCLKO &= ~0x01; //‰∏çËæìÂá∫Êó∂Èíü
  58   2          
  59   2          TH0 = (u8)(TIMx->TIM_Value >> 8);
  60   2          TL0 = (u8)TIMx->TIM_Value;
  61   2          if(TIMx->TIM_Run == ENABLE) TR0 = 1;  //ÂºÄÂßãËøêË°å
  62   2          return  0;    //ÊàêÂäü
  63   2        }
  64   1      
  65   1        if(TIM == Timer1)
  66   1        {
  67   2          TR1 = 0;    //ÂÅúÊ≠¢ËÆ°Êï∞
  68   2          if(TIMx->TIM_Interrupt == ENABLE)   ET1 = 1;  //ÂÖÅËÆ∏‰∏≠Êñ≠
  69   2          else                  ET1 = 0;  //Á¶ÅÊ≠¢‰∏≠Êñ≠
  70   2          if(TIMx->TIM_Polity == PolityHigh)    PT1 = 1;  //È´ò‰ºòÂÖàÁ∫ß‰∏≠Êñ≠
  71   2          else                  PT1 = 0;  //‰Ωé‰ºòÂÖàÁ∫ß‰∏≠Êñ≠
  72   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //ÈîôËØØ
  73   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //Â∑•‰ΩúÊ®°Âºè,0: 16‰ΩçËá™Âä®ÈáçË£Ö, 1: 16‰ΩçÂÆöÊó∂/ËÆ°Êï∞, 2: 8
             -‰ΩçËá™Âä®ÈáçË£Ö
  74   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x40;  //12T
  75   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x40;  //1T
  76   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x40;  //ÂØπÂ§ñËÆ°Êï∞ÊàñÂàÜÈ¢ë
  77   2          else                    TMOD &= ~0x40;  //ÂÆöÊó∂
  78   2          if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x02; //ËæìÂá∫Êó∂Èíü
  79   2          else              INTCLKO &= ~0x02; //‰∏çËæìÂá∫Êó∂Èíü
  80   2          
  81   2          TH1 = (u8)(TIMx->TIM_Value >> 8);
  82   2          TL1 = (u8)TIMx->TIM_Value;
  83   2          if(TIMx->TIM_Run == ENABLE) TR1 = 1;  //ÂºÄÂßãËøêË°å
  84   2          return  0;    //ÊàêÂäü
  85   2        }
  86   1      
  87   1        if(TIM == Timer2)   //Timer2,Âõ∫ÂÆö‰∏∫16‰ΩçËá™Âä®ÈáçË£Ö, ‰∏≠Êñ≠Êó†‰ºòÂÖàÁ∫ß
  88   1        {
  89   2          AUXR &= ~(1<<4);  //ÂÅúÊ≠¢ËÆ°Êï∞
  90   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //ÂÖÅËÆ∏‰∏≠Êñ≠
  91   2          else                    IE2  &= ~(1<<2);  //Á¶ÅÊ≠¢‰∏≠Êñ≠
  92   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
  93   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~(1<<2);  //12T
  94   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  (1<<2);  //1T
  95   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  AUXR |=  (1<<3);  //ÂØπÂ§ñËÆ°Êï∞ÊàñÂàÜÈ¢ë
  96   2          else                    AUXR &= ~(1<<3);  //ÂÆöÊó∂
  97   2          if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x04; //ËæìÂá∫Êó∂Èíü
  98   2          else              INTCLKO &= ~0x04; //‰∏çËæìÂá∫Êó∂Èíü
  99   2      
 100   2          TH2 = (u8)(TIMx->TIM_Value >> 8);
 101   2          TL2 = (u8)TIMx->TIM_Value;
 102   2          if(TIMx->TIM_Run == ENABLE) AUXR |=  (1<<4);  //ÂºÄÂßãËøêË°å
 103   2          return  0;    //ÊàêÂäü
 104   2        }
 105   1      
 106   1        if(TIM == Timer3)   //Timer3,Âõ∫ÂÆö‰∏∫16‰ΩçËá™Âä®ÈáçË£Ö, ‰∏≠Êñ≠Êó†‰ºòÂÖàÁ∫ß
 107   1        {
 108   2      
 109   2          T4T3M &= ~T3R;  //ÂÅúÊ≠¢ËÆ°Êï∞
C51 COMPILER V9.55   TIMER                                                                 04/12/2020 16:17:52 PAGE 3   

 110   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //ÂÖÅËÆ∏‰∏≠Êñ≠
 111   2          else                    IE2  &= ~(1<<2);  //Á¶ÅÊ≠¢‰∏≠Êñ≠
 112   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 113   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  T4T3M &= ~T3x12;  //12T
 114   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   T4T3M |=  T3x12;  //1T
 115   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  T4T3M |=  T3_CT;  //ÂØπÂ§ñËÆ°Êï∞ÊàñÂàÜÈ¢ë
 116   2          else                    T4T3M &= ~T3_CT;  //ÂÆöÊó∂
 117   2          if(TIMx->TIM_ClkOut == ENABLE)  T4T3M |=  T3CLKO; //ËæìÂá∫Êó∂Èíü
 118   2          else              T4T3M &= ~T3CLKO; //‰∏çËæìÂá∫Êó∂Èíü
 119   2      
 120   2          T4H = (u8)(TIMx->TIM_Value >> 8);
 121   2          T4L = (u8)TIMx->TIM_Value;
 122   2          if(TIMx->TIM_Run == ENABLE) T4T3M |=  T3R;  //ÂºÄÂßãËøêË°å
 123   2          return  0;    //ÊàêÂäü
 124   2        }
 125   1      
 126   1        if(TIM == Timer4)   //Timer4,Âõ∫ÂÆö‰∏∫16‰ΩçËá™Âä®ÈáçË£Ö, ‰∏≠Êñ≠Êó†‰ºòÂÖàÁ∫ß
 127   1        {
 128   2      
 129   2          T4T3M &= ~T4R;  //ÂÅúÊ≠¢ËÆ°Êï∞
 130   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //ÂÖÅËÆ∏‰∏≠Êñ≠
 131   2          else                    IE2  &= ~(1<<2);  //Á¶ÅÊ≠¢‰∏≠Êñ≠
 132   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 133   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  T4T3M &= ~T4x12;  //12T
 134   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   T4T3M |=  T4x12;  //1T
 135   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  T4T3M |=  T4_CT;  //ÂØπÂ§ñËÆ°Êï∞ÊàñÂàÜÈ¢ë
 136   2          else                    T4T3M &= ~T4_CT;  //ÂÆöÊó∂
 137   2          if(TIMx->TIM_ClkOut == ENABLE)  T4T3M |=  T4CLKO; //ËæìÂá∫Êó∂Èíü
 138   2          else              T4T3M &= ~T4CLKO; //‰∏çËæìÂá∫Êó∂Èíü
 139   2      
 140   2          T4H = (u8)(TIMx->TIM_Value >> 8);
 141   2          T4L = (u8)TIMx->TIM_Value;
 142   2          if(TIMx->TIM_Run == ENABLE) T4T3M |=  T4R;  //ÂºÄÂßãËøêË°å
 143   2          return  0;    //ÊàêÂäü
 144   2        }
 145   1        return 2; //ÈîôËØØ
 146   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    675    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
